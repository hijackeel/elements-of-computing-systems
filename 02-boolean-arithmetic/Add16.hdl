// 16-bit heirarchical Carry Lookahead Adder
// out = a + b
// Integer two's complement addition.

CHIP Add16 {
  IN a[16], b[16];
  OUT out[16], gg, pg;

  PARTS:
  CLA4(a=a[0..3],   b=b[0..3],   cin=false, s=out[0..3],   gg=gg0,  pg=pg0);
  CLA4(a=a[4..7],   b=b[4..7],   cin=c0,    s=out[4..7],   gg=gg4,  pg=pg4);
  CLA4(a=a[8..11],  b=b[8..11],  cin=c4,    s=out[8..11],  gg=gg8,  pg=pg8);
  CLA4(a=a[12..15], b=b[12..15], cin=c8,    s=out[12..15], gg=gg12, pg=pg12);

  // c0 = gg0 + pg0cin
  And(a=pg0, b=false, out=pg0cin);
  Or(a=gg0, b=pg0cin, out=c0);

  // c4 = gg4 + pg4c0
  And(a=pg4, b=c0, out=pg4c0);
  Or(a=gg4, b=pg4c0, out=c4);

  // c8 = gg8 + pg8c4
  And(a=pg8, b=c4, out=pg8c4);
  Or(a=gg8, b=pg8c4, out=c8);

  // gg = c12 = gg12 + pg12c8
  And(a=pg12, b=c8, out=pg12c8);
  Or(a=gg12, b=pg12c8, out=gg);

  // pg = pg0pg4pg8pg12
  And(a=pg0, b=pg4, out=andpg04);
  And(a=pg8, b=pg12, out=andpg812);
  And(a=andpg04, b=andpg812, out=pg);
}
